!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).autoGroupStrings=e()}}((function(){return function e(o,r,n){function t(i,m){if(!r[i]){if(!o[i]){var d="function"==typeof require&&require;if(!m&&d)return d(i,!0);if(s)return s(i,!0);var f=new Error("Cannot find module '"+i+"'");throw f.code="MODULE_NOT_FOUND",f}var p=r[i]={exports:{}};o[i][0].call(p.exports,(function(e){return t(o[i][1][e]||e)}),p,p.exports,e,o,r,n)}return r[i].exports}for(var s="function"==typeof require&&require,i=0;i<n.length;i++)t(n[i]);return t}({1:[function(e,o,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=(e,{delimiter:o,direction:r,caseSensitive:n}={delimiter:" ",direction:"rtl",caseSensitive:!1})=>{void 0===o&&(o=" "),void 0===r&&(r="rtl"),void 0===n&&(n=!1);const t=e.length;let s=[];for(let i=0;i<t;i++)if("rtl"===r){const r=e[i].split(o).slice().reverse();if(s.find(e=>e.common===r[0])){const e=s.findIndex(e=>e.common===r[0]);s[e].members.push(i)}else s.push({common:r[0],members:[i],prevWords:[r]});const t=s.findIndex(e=>!0===n?r[0]===e.common:r[0].toLowerCase()===e.common.toLowerCase());s[t].members.push(i);for(let m=1;m<r.length;m++)for(let d=0;d<s[t].prevWords.length;d++)void 0!==s[t].prevWords[d][m]&&(!0===n?s[t].prevWords[d][m]===r[m]:s[t].prevWords[d][m].toLowerCase()===r[m].toLowerCase())&&s.push({common:r[m]+o+r.slice(0,m).reverse().join(o),members:[e.indexOf(s[t].prevWords[d].slice().reverse().join(o)),i],prevWords:[]});s[t].prevWords.push(r)}else{const r=e[i].split(o);if(s.find(e=>e.common===r[0])){const e=s.findIndex(e=>e.common===r[0]);s[e].members.push(i)}else s.push({common:r[0],members:[i],prevWords:[r]});const t=s.findIndex(e=>!0===n?r[0]===e.common:r[0].toLowerCase()===e.common.toLowerCase());s[t].members.push(i);for(let m=1;m<r.length;m++)for(let d=0;d<s[t].prevWords.length;d++)void 0!==s[t].prevWords[d][m]&&(!0===n?s[t].prevWords[d][m]===r[m]:s[t].prevWords[d][m].toLowerCase()===r[m].toLowerCase())&&s.push({common:r.slice(0,m).join(o)+o+r[m],members:[e.indexOf(s[t].prevWords[d].join(o)),i],prevWords:[]});s[t].prevWords.push(r)}let i=[];const m=Array.from(new Set(s.map(e=>e.common)));for(const e of m)i.push({common:e,members:Array.from(new Set(s.filter(o=>o.common===e).map(e=>e.members).flat()))});return i=i.filter(e=>e.members.length>1),i};r.default=n,o.exports=n},{}]},{},[1])(1)}));