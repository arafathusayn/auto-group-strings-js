!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).autoGroupStrings=e()}}((function(){return function e(o,r,n){function s(i,m){if(!r[i]){if(!o[i]){var d="function"==typeof require&&require;if(!m&&d)return d(i,!0);if(t)return t(i,!0);var f=new Error("Cannot find module '"+i+"'");throw f.code="MODULE_NOT_FOUND",f}var c=r[i]={exports:{}};o[i][0].call(c.exports,(function(e){return s(o[i][1][e]||e)}),c,c.exports,e,o,r,n)}return r[i].exports}for(var t="function"==typeof require&&require,i=0;i<n.length;i++)s(n[i]);return s}({1:[function(e,o,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0});const n=(e,{delimiter:o,direction:r,caseSensitive:n}={delimiter:" ",direction:"rtl",caseSensitive:!1})=>{void 0===o&&(o=" "),void 0===r&&(r="rtl"),void 0===n&&(n=!1);const s=e.length;let t=[];for(let i=0;i<s;i++)if("rtl"===r){const r=e[i].split(o).slice().reverse();if(t.find(e=>e.common===r[0])){const e=t.findIndex(e=>e.common===r[0]);t[e].members.push(i)}else t.push({common:r[0],members:[i],prevWords:[r]});const s=t.findIndex(e=>!0===n?r[0]===e.common:r[0].toLowerCase()===e.common.toLowerCase());t[s].members.push(i);for(let m=1;m<r.length;m++)for(let d=0;d<t[s].prevWords.length;d++)void 0!==t[s].prevWords[d][m]&&(!0===n?t[s].prevWords[d].slice(0,m+1).join(o)===r.slice(0,m+1).join(o):t[s].prevWords[d].slice(0,m+1).join(o).toLowerCase()===r.slice(0,m+1).join(o).toLowerCase())&&t.push({common:r[m]+o+r.slice(0,m).reverse().join(o),members:[e.indexOf(t[s].prevWords[d].slice().reverse().join(o)),i],prevWords:[]});t[s].prevWords.push(r)}else{const r=e[i].split(o);if(t.find(e=>e.common===r[0])){const e=t.findIndex(e=>e.common===r[0]);t[e].members.push(i)}else t.push({common:r[0],members:[i],prevWords:[r]});const s=t.findIndex(e=>!0===n?r[0]===e.common:r[0].toLowerCase()===e.common.toLowerCase());t[s].members.push(i);for(let m=1;m<r.length;m++)for(let d=0;d<t[s].prevWords.length;d++)void 0!==t[s].prevWords[d][m]&&(!0===n?t[s].prevWords[d].slice(0,m+1).join(o)===r.slice(0,m+1).join(o):t[s].prevWords[d].slice(0,m+1).join(o).toLowerCase()===r.slice(0,m+1).join(o).toLowerCase())&&t.push({common:r.slice(0,m).join(o)+o+r[m],members:[e.indexOf(t[s].prevWords[d].join(o)),i],prevWords:[]});t[s].prevWords.push(r)}let i=[];const m=Array.from(new Set(t.map(e=>e.common)));for(const e of m)i.push({common:e,members:Array.from(new Set(t.filter(o=>o.common===e).map(e=>e.members).flat()))});return i=i.filter(e=>e.members.length>1),i};r.default=n,o.exports=n},{}]},{},[1])(1)}));